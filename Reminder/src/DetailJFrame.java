package btl_oop;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 * Class Hien thi chi tiet cac danh sach cong viec
 * @author nhom2
 */
public class DetailJFrame extends javax.swing.JFrame {

    /**
     * Creates new form detailJFrame
     */
    public DetailJFrame(BoardFrame mainFrame, Board board,boolean bool) {
        this.mainFrame = mainFrame;
        this.board = board;
        this.isDone = bool;
        initComponents();
        this.setLocation(300, 100);
        lbBoardName.setText(board.getName());
        initList(board.getList());
        setPnTask();
        pnNewTask.setVisible(false);
        pasteTask.setEnabled(false);
        tfSearch.requestFocus(false);
        lList.setComponentPopupMenu(lMenuRight);
        lTask.setComponentPopupMenu(tMenuRight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lMenuRight = new javax.swing.JPopupMenu();
        RenameList = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        deleteList = new javax.swing.JMenuItem();
        DoneItem = new javax.swing.JMenuItem();
        WarningItem = new javax.swing.JMenuItem();
        tMenuRight = new javax.swing.JPopupMenu();
        moveTask = new javax.swing.JMenuItem();
        pasteTask = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        deleteTask = new javax.swing.JMenuItem();
        lbBoardName = new javax.swing.JLabel();
        pnTask = new javax.swing.JPanel();
        tfTitle = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        tfPlace = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pnTime = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbHourS = new javax.swing.JComboBox<>();
        cbMinuteS = new javax.swing.JComboBox<>();
        cbHourE = new javax.swing.JComboBox<>();
        cbMinuteE = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pnDatechooser = new javax.swing.JPanel();
        dateChooserS = new com.toedter.calendar.JDateChooser();
        dateChooserE = new com.toedter.calendar.JDateChooser();
        pnRepeat = new javax.swing.JPanel();
        chbEveryDay = new javax.swing.JCheckBox();
        chbEveryWeek = new javax.swing.JCheckBox();
        pnDayRepeat = new javax.swing.JPanel();
        chbMon = new javax.swing.JCheckBox();
        chbWen = new javax.swing.JCheckBox();
        chbTue = new javax.swing.JCheckBox();
        chbSun = new javax.swing.JCheckBox();
        chbFri = new javax.swing.JCheckBox();
        chbThu = new javax.swing.JCheckBox();
        chbSat = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taNote = new javax.swing.JTextArea();
        chbRepeat = new javax.swing.JCheckBox();
        chbDone = new javax.swing.JCheckBox();
        btSave = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        chbAlarm = new javax.swing.JCheckBox();
        cbPriority = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pnListNote = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lTask = new javax.swing.JList<>();
        pnList = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lList = new javax.swing.JList<>();
        btAddList = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        pnNewTask = new javax.swing.JPanel();
        btAddTask = new javax.swing.JButton();

        RenameList.setText("Rename");
        RenameList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenameListActionPerformed(evt);
            }
        });
        lMenuRight.add(RenameList);
        lMenuRight.add(jSeparator2);

        deleteList.setText("Delete");
        deleteList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteListActionPerformed(evt);
            }
        });
        lMenuRight.add(deleteList);

        DoneItem.setText("Done Task");
        DoneItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneItemActionPerformed(evt);
            }
        });
        lMenuRight.add(DoneItem);

        WarningItem.setText("Warning Tasks");
        WarningItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WarningItemActionPerformed(evt);
            }
        });
        lMenuRight.add(WarningItem);

        moveTask.setText("Move");
        moveTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTaskActionPerformed(evt);
            }
        });
        tMenuRight.add(moveTask);

        pasteTask.setText("Paste");
        pasteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteTaskActionPerformed(evt);
            }
        });
        tMenuRight.add(pasteTask);
        tMenuRight.add(jSeparator1);

        deleteTask.setText("Delete");
        deleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaskActionPerformed(evt);
            }
        });
        tMenuRight.add(deleteTask);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REMINDER");
        setPreferredSize(new java.awt.Dimension(950, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lbBoardName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbBoardName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbBoardName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tfTitle.setBackground(new java.awt.Color(204, 204, 204));
        tfTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tfTitle.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tfTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tfTitleMousePressed(evt);
            }
        });

        tfPlace.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfPlace.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PLACE");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(tfPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Start Time");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("End Time");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText(":");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText(":");

        javax.swing.GroupLayout pnDatechooserLayout = new javax.swing.GroupLayout(pnDatechooser);
        pnDatechooser.setLayout(pnDatechooserLayout);
        pnDatechooserLayout.setHorizontalGroup(
            pnDatechooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatechooserLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(pnDatechooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateChooserS, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateChooserE, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnDatechooserLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateChooserE, dateChooserS});

        pnDatechooserLayout.setVerticalGroup(
            pnDatechooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatechooserLayout.createSequentialGroup()
                .addComponent(dateChooserS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(dateChooserE, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnDatechooserLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateChooserE, dateChooserS});

        javax.swing.GroupLayout pnTimeLayout = new javax.swing.GroupLayout(pnTime);
        pnTime.setLayout(pnTimeLayout);
        pnTimeLayout.setHorizontalGroup(
            pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTimeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnTimeLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbHourS, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnTimeLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbHourE, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnTimeLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMinuteE, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnTimeLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMinuteS, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnDatechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        pnTimeLayout.setVerticalGroup(
            pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTimeLayout.createSequentialGroup()
                .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnDatechooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, Short.MAX_VALUE)
                    .addGroup(pnTimeLayout.createSequentialGroup()
                        .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbMinuteS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbHourS, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addGap(16, 16, 16)
                        .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbMinuteE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbHourE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnTimeLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbHourE, cbHourS, cbMinuteE, cbMinuteS, jLabel3, jLabel4});

        chbEveryDay.setText("Every Day");
        chbEveryDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbEveryDayActionPerformed(evt);
            }
        });

        chbEveryWeek.setText("Every Week");
        chbEveryWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbEveryWeekActionPerformed(evt);
            }
        });

        chbMon.setText("Mon");

        chbWen.setText("Wen");

        chbTue.setText("Tue");

        chbSun.setText("Sun");

        chbFri.setText("Fri");

        chbThu.setText("Thu");

        chbSat.setText("Sat");

        javax.swing.GroupLayout pnDayRepeatLayout = new javax.swing.GroupLayout(pnDayRepeat);
        pnDayRepeat.setLayout(pnDayRepeatLayout);
        pnDayRepeatLayout.setHorizontalGroup(
            pnDayRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDayRepeatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chbMon, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbTue, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbWen, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(chbThu, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbFri, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbSat, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chbSun, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        pnDayRepeatLayout.setVerticalGroup(
            pnDayRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDayRepeatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDayRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbMon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbSun, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbSat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbFri, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbThu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbWen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbTue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnRepeatLayout = new javax.swing.GroupLayout(pnRepeat);
        pnRepeat.setLayout(pnRepeatLayout);
        pnRepeatLayout.setHorizontalGroup(
            pnRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRepeatLayout.createSequentialGroup()
                .addGroup(pnRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnRepeatLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(chbEveryDay)
                        .addGap(119, 119, 119)
                        .addComponent(chbEveryWeek))
                    .addComponent(pnDayRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnRepeatLayout.setVerticalGroup(
            pnRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRepeatLayout.createSequentialGroup()
                .addGroup(pnRepeatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbEveryWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbEveryDay, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(pnDayRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel11.setText("NOTE:");

        taNote.setColumns(20);
        taNote.setLineWrap(true);
        taNote.setRows(5);
        taNote.setWrapStyleWord(true);
        jScrollPane3.setViewportView(taNote);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chbRepeat.setText("REPEAT");
        chbRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbRepeatActionPerformed(evt);
            }
        });

        chbDone.setText("DONE");

        btSave.setText("SAVE");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btCancel.setText("CANCEL");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        chbAlarm.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chbAlarm.setText("Alarm");

        cbPriority.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbPriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Medium", "High" }));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Priority :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(chbAlarm, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(chbAlarm, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnTaskLayout = new javax.swing.GroupLayout(pnTask);
        pnTask.setLayout(pnTaskLayout);
        pnTaskLayout.setHorizontalGroup(
            pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTaskLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTaskLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnTaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTaskLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chbDone, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnTaskLayout.createSequentialGroup()
                        .addComponent(chbRepeat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnRepeat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnTaskLayout.createSequentialGroup()
                        .addGroup(pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        pnTaskLayout.setVerticalGroup(
            pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTaskLayout.createSequentialGroup()
                .addGroup(pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfTitle)
                    .addComponent(chbDone, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(pnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lTask.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lTaskMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lTask);

        javax.swing.GroupLayout pnListNoteLayout = new javax.swing.GroupLayout(pnListNote);
        pnListNote.setLayout(pnListNoteLayout);
        pnListNoteLayout.setHorizontalGroup(
            pnListNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnListNoteLayout.setVerticalGroup(
            pnListNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        lList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lList);

        btAddList.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btAddList.setText("+");
        btAddList.setAlignmentY(0.0F);
        btAddList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btAddList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnListLayout = new javax.swing.GroupLayout(pnList);
        pnList.setLayout(pnListLayout);
        pnListLayout.setHorizontalGroup(
            pnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btAddList, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnListLayout.setVerticalGroup(
            pnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnListLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAddList, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tfSearch.setToolTipText("Search List");
        tfSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfSearchFocusLost(evt);
            }
        });
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pnList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnListNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnListNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(526, Short.MAX_VALUE))
        );

        btAddTask.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btAddTask.setText("New Task");
        btAddTask.setPreferredSize(new java.awt.Dimension(200, 80));
        btAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnNewTaskLayout = new javax.swing.GroupLayout(pnNewTask);
        pnNewTask.setLayout(pnNewTaskLayout);
        pnNewTaskLayout.setHorizontalGroup(
            pnNewTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnNewTaskLayout.createSequentialGroup()
                .addContainerGap(188, Short.MAX_VALUE)
                .addComponent(btAddTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(183, 183, 183))
        );
        pnNewTaskLayout.setVerticalGroup(
            pnNewTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnNewTaskLayout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(btAddTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnNewTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
            .addComponent(lbBoardName, javax.swing.GroupLayout.PREFERRED_SIZE, 951, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lbBoardName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnNewTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chbRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbRepeatActionPerformed

        if(!chbRepeat.isSelected()) {
            pnDatechooser.setVisible(true);
            dateChooserS.setDate(new Date());
            dateChooserE.setDate(new Date());
            pnRepeat.setVisible(false);
        }else{
            pnDatechooser.setVisible(false);
            if(chbEveryDay.isSelected()) {
                pnDayRepeat.setVisible(false);
            }else{
                chbEveryWeek.setSelected(true);
                pnDayRepeat.setVisible(true);
            }
            pnRepeat.setVisible(true);
        }
    }//GEN-LAST:event_chbRepeatActionPerformed

    private void chbEveryDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEveryDayActionPerformed

        if(!chbEveryDay.isSelected()) {

            chbEveryWeek.setSelected(true);
            pnDayRepeat.setVisible(true);

        }else{

            chbEveryWeek.setSelected(false);
            pnDayRepeat.setVisible(false);
        }

    }//GEN-LAST:event_chbEveryDayActionPerformed

    private void chbEveryWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEveryWeekActionPerformed

        if(chbEveryWeek.isSelected()) {
            chbEveryDay.setSelected(false);
            pnDayRepeat.setVisible(true);      
        }else{
            chbEveryDay.setSelected(true);
            pnDayRepeat.setVisible(false);
        }
        resetRepeatDay();
    }//GEN-LAST:event_chbEveryWeekActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        board.saveBoards();
        
    }//GEN-LAST:event_formWindowClosing

    private void tfTitleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTitleMousePressed
        tfTitle.selectAll();
    }//GEN-LAST:event_tfTitleMousePressed

    private void lListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lListMouseClicked

        listSelect = lList.getSelectedIndex();
        if(listSelect < 0) return;
        
        List<ToDoList> ltdl;
         ltdl = board.getList();
        
        int n = ltdl.size();
        String s = lList.getModel().getElementAt(listSelect);
        for(int i = 0; i< n; i++)
            if(s.equals(ltdl.get(i).getName()))
            {
                listSelect = i;
                break;
            }
        initListTask();
        taskSelect = -1;
        pnTask.setVisible(false);
        pnNewTask.setVisible(true);
    }//GEN-LAST:event_lListMouseClicked

    private void lTaskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lTaskMouseClicked
        if(listSelect < 0) return;
        taskSelect = lTask.getSelectedIndex();
        if(taskSelect < 0) return;
        String s = lTask.getModel().getElementAt(taskSelect);
        List<Task> lt = board.getList().get(listSelect).getList();
        int n = lt.size();
        for(int i = 0; i < n; i++)
            if(s.equals(lt.get(i).getName()))
            {
                taskSelect = i;
                break;
            }
        if(taskSelect >= 0) {
            showTask(board.getList().get(listSelect).getList().get(taskSelect));
            pnTask.setVisible(true);
            pnNewTask.setVisible(false);
            chbDone.setEnabled(!isDone);
        }  
    }//GEN-LAST:event_lTaskMouseClicked

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed

        Task task; 
        if(taskSelect >= 0) task = board.getList().get(listSelect).getList().get(taskSelect);
        else task = new Task("");
        task.setStatus(chbDone.isSelected());
        task.setName(tfTitle.getText());
        task.setPlace(tfPlace.getText());
        boolean[] b = new boolean[9];
        b[0] = chbRepeat.isSelected();
        b[1] = chbEveryDay.isSelected();
        if(b[0]){
            Time startTime = new Time(cbHourS.getSelectedIndex(), cbMinuteS.getSelectedIndex());
            Time endTime = new Time(cbHourE.getSelectedIndex(), cbMinuteE.getSelectedIndex());
            task.setStartTime(startTime);
            task.setEndTime(endTime);
            if(b[1]){
                b[2] = true;
                b[3] = true;
                b[4] = true;
                b[5] = true;
                b[6] = true;
                b[7] = true;
                b[8] = true;
            }else{
                b[2] = chbMon.isSelected();
                b[3] = chbTue.isSelected();
                b[4] = chbWen.isSelected();
                b[5] = chbThu.isSelected();
                b[6] = chbFri.isSelected();
                b[7] = chbSat.isSelected();
                b[8] = chbSun.isSelected();
            }
        }else{
            Date ds = dateChooserS.getDate();
            Date de = dateChooserE.getDate();
            if(ds.compareTo(de) > 0){
                JOptionPane.showMessageDialog(rootPane, "Error Time! ","Error",HEIGHT);
                return;
            }
            Time startTime = new Time(cbHourS.getSelectedIndex(), cbMinuteS.getSelectedIndex(),ds);
            Time endTime = new Time(cbHourE.getSelectedIndex(), cbMinuteE.getSelectedIndex(),de);
            task.setStartTime(startTime);
            task.setEndTime(endTime);
            b[2] = false;
            b[3] = false;
            b[4] = false;
            b[5] = false;
            b[6] = false;
            b[7] = false;
            b[8] = false;
        }
        task.setRepeat(b);
        task.setContent(taNote.getText());
        task.setPriority(cbPriority.getSelectedIndex());
        task.setNotification(chbAlarm.isSelected());
        if(taskSelect < 0){
            boolean add = board.getList().get(listSelect).addATask(task);
            if(!add) {
                JOptionPane.showMessageDialog(rootPane, "Name is Existed","Error",HEIGHT);
                return;
            }
            
        }
        pnTask.setVisible(false);
        pnNewTask.setVisible(true);
        initListTask();
    }//GEN-LAST:event_btSaveActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed

        pnTask.setVisible(false);
        pnNewTask.setVisible(true);
    }//GEN-LAST:event_btCancelActionPerformed

    private void btAddListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddListActionPerformed
        nameFrame = new NameFrame(this,"Enter Your List Name",null,"Create",true);   
        nameFrame.setVisible(true);
        nameFrame.setTitle("Create A New List");
        btAddList.setEnabled(false);
    }//GEN-LAST:event_btAddListActionPerformed

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        String s = tfSearch.getText();
        List<ToDoList> l = board.getList();
        ArrayList<ToDoList> resultS = search(l, s);
        initList(resultS);
    }//GEN-LAST:event_tfSearchKeyReleased

    private void btAddTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddTaskActionPerformed
        pnTask.setVisible(true);
        pnNewTask.setVisible(false);
        Task n = new Task("New Task");
        showTask(n);
        tfTitle.requestFocus();
        tfTitle.selectAll();
        chbDone.setEnabled(false);
        chbDone.setSelected(false);
        lTask.setSelectedIndex(-1);
        taskSelect = -1;
    }//GEN-LAST:event_btAddTaskActionPerformed

    private void deleteListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteListActionPerformed
        if(listSelect<0) return;
        board.getList().remove(listSelect);
        initList(board.getList());
    }//GEN-LAST:event_deleteListActionPerformed

    private void RenameListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameListActionPerformed
        if(listSelect < 0) return;
        nameFrame = new NameFrame(this, "Enter Your New List Name",board.getList().get(listSelect).getName(),"Change",false);
        nameFrame.setVisible(true);
               
    }//GEN-LAST:event_RenameListActionPerformed

    private void tfSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusLost
        tfSearch.setText("");
        initList(board.getList());
    }//GEN-LAST:event_tfSearchFocusLost

    private void moveTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTaskActionPerformed
            if(taskSelect < 0) return;
            Task t = board.getList().get(listSelect).getList().get(taskSelect);
            taskMove = new Task(t);
            board.getList().get(listSelect).deleteATask(t);
            pasteTask.setEnabled(true);
    }//GEN-LAST:event_moveTaskActionPerformed

    private void pasteTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteTaskActionPerformed
            
            board.getList().get(listSelect).addATask(taskMove);
            taskMove = null;
            pasteTask.setEnabled(false);
            initListTask();
            
    }//GEN-LAST:event_pasteTaskActionPerformed

    private void deleteTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaskActionPerformed
        if(taskSelect < 0 ) return;
        board.getList().get(listSelect).getList().remove(taskSelect);
        initListTask();
    }//GEN-LAST:event_deleteTaskActionPerformed

    private void WarningItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WarningItemActionPerformed
       if(listSelect<0) return;
       SpecialTask sta = new SpecialTask(board.getList().get(listSelect).warningWorks());
       sta.setLocation(500, 250);
       sta.setTitle("Warning Tasks");
       sta.setVisible(true);
    }//GEN-LAST:event_WarningItemActionPerformed

    private void DoneItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneItemActionPerformed
       if(listSelect<0) return;
       SpecialTask sta = new SpecialTask(board.getList().get(listSelect).completeWorks());
       sta.setLocation(500, 250);
       sta.setTitle("Done Tasks");
       sta.setVisible(true);
    }//GEN-LAST:event_DoneItemActionPerformed

    /**
     * Nap du lieu vao list TODOLIST
     */
    private void initList(List<ToDoList> l){
        DefaultListModel dlm = new DefaultListModel();
        int n = l.size();
            for(int i = 0; i < n; i++){
                    dlm.addElement(l.get(i).getName()); 
            
            }
        lList.setModel(dlm);
    }
    /**
     * Nap du lieu vao list Task
     */
    private void initListTask(){
        DefaultListModel dlm = new DefaultListModel();
        if(listSelect >= 0){
            List<Task> ln = board.getList().get(listSelect).getList();
            int n = ln.size();
            for(int i = 0; i < n; i++)
               if(isDone){
                    if(ln.get(i).getStatus())
                        dlm.addElement(ln.get(i).getName());}
                else 
                   if(!ln.get(i).getStatus())
                        dlm.addElement(ln.get(i).getName());
        }
        lTask.setModel(dlm);
        
    }
    /**
     * Nap du lieu ket qua search vao list
     * @param l List ket qua search
     * @param j JList can nap ket qua
     */
    private void initSearch(List<String> l,JList j){
        DefaultListModel dlm = new DefaultListModel();
        int n = l.size();
        for(int i = 0; i < n; i++)
            dlm.addElement(l.get(i));
        j.setModel(dlm);
    }
    /**
     * Ham tim kiem cac List co chua chuoi  s
     * @param l List tim kiem 
     * @param s chuoi can tim kiem
     * @return List ket qua
     */
    private ArrayList<ToDoList> search(List<ToDoList> l, String s){
        int n = l.size();
        ArrayList<ToDoList> result = new ArrayList<>();
        for(int i=0; i< n; i++){
            ToDoList tdl = l.get(i);
            if(tdl.getName().contains(s)) result.add(tdl);
        }
        return result;    
    }
    /**
     * Nap du lieu tu Task vao khung swing
     * @param n Task can nap du lieu
     */
    private void showTask(Task n){
        pnTask.setVisible(true);
        tfTitle.setText(n.getName());
        tfPlace.setText(n.getPlace());
        taNote.setText(n.getContent());
        if(n.getStatus()) 
            chbDone.setSelected(true);
        else 
            chbDone.setSelected(false);
        boolean[] b = n.getRepeat();
        if(b[0]){
            pnDatechooser.setVisible(false);
            chbRepeat.setSelected(true);
            pnRepeat.setVisible(true);
            if(b[1]){
                chbEveryDay.setSelected(true);
                chbEveryWeek.setSelected(false);
            }else{
                chbEveryDay.setSelected(false);
                chbEveryWeek.setSelected(true);
                if(b[2]) chbMon.setSelected(true);
                else chbMon.setSelected(false);
                if(b[3]) chbTue.setSelected(true);
                else chbTue.setSelected(false);
                if(b[4]) chbWen.setSelected(true);
                else chbWen.setSelected(false);
                if(b[5]) chbThu.setSelected(true);
                else chbThu.setSelected(false);
                if(b[6]) chbFri.setSelected(true);
                else chbFri.setSelected(false);
                if(b[7]) chbSat.setSelected(true);
                else chbSat.setSelected(false);
                if(b[8]) chbSun.setSelected(true);
                else chbSun.setSelected(false);
            }  
        }else {
            chbRepeat.setSelected(false);
            pnRepeat.setVisible(false);
        }
        
        cbHourS.setSelectedIndex(n.getStartTime().getTime().getHours());
        cbHourE.setSelectedIndex(n.getEndTime().getTime().getHours());
        cbMinuteS.setSelectedIndex(n.getStartTime().getTime().getMinutes());
        cbMinuteE.setSelectedIndex(n.getEndTime().getTime().getMinutes());
        chbAlarm.setSelected(n.getNotification());
        cbPriority.setSelectedIndex(n.getPriority());
        dateChooserS.setDate(n.getStartTime().getTime());
        dateChooserE.setDate(n.getEndTime().getTime());
    }
    /**
     * Cai dat khung swing hien thi Task
     */
    private void setPnTask(){
        DefaultComboBoxModel dfmodelHE = new DefaultComboBoxModel(); 
        DefaultComboBoxModel dfmodelHS = new DefaultComboBoxModel();
        for(int i = 0; i < 24; i++){
            dfmodelHE.addElement(i);
            dfmodelHS.addElement(i);
        }
        cbHourE.setModel(dfmodelHE);                    
        cbHourS.setModel(dfmodelHS);
        
        DefaultComboBoxModel dfmodelMS = new DefaultComboBoxModel();
        DefaultComboBoxModel dfmodelME = new DefaultComboBoxModel();
        for(int i = 0; i < 60; i++){
            dfmodelMS.addElement(i);
            dfmodelME.addElement(i);
        }
        cbMinuteS.setModel(dfmodelMS);
        cbMinuteE.setModel(dfmodelME);
        pnTask.setVisible(false);
        boolean b = !isDone;
        tfTitle.setEnabled(b);
        chbDone.setEnabled(b);
        tfPlace.setEnabled(b);
        cbHourS.setEnabled(b);
        cbHourE.setEnabled(b);
        cbMinuteS.setEnabled(b);
        cbMinuteE.setEnabled(b);
        dateChooserS.setEnabled(b);
        dateChooserE.setEnabled(b);
        chbRepeat.setEnabled(b);
        chbEveryDay.setEnabled(b);
        chbEveryWeek.setEnabled(b);
        chbMon.setEnabled(b);
        chbTue.setEnabled(b);
        chbWen.setEnabled(b);
        chbThu.setEnabled(b);
        chbFri.setEnabled(b);
        chbSat.setEnabled(b);
        chbSun.setEnabled(b);
        chbAlarm.setEnabled(b);
        cbPriority.setEnabled(b);
        taNote.setEnabled(b);
        btCancel.setEnabled(b);
        btSave.setEnabled(b);
        btAddTask.setVisible(b);
        btAddList.setEnabled(b);
        RenameList.setEnabled(b);
        moveTask.setEnabled(b);
        pasteTask.setEnabled(b);
        deleteList.setEnabled(b);
        DoneItem.setEnabled(b);
        WarningItem.setEnabled(b);
    }
    /**
     * Dua cac checkbox ngay ve trang thai khong dc chon
     */
    private void resetRepeatDay(){
        chbMon.setSelected(false);
        chbTue.setSelected(false);
        chbWen.setSelected(false);
        chbThu.setSelected(false);
        chbFri.setSelected(false);
        chbSat.setSelected(false);
        chbSun.setSelected(false);
    }
    /**
     * Ham tao 1 ToDoList moi voi ten da cho
     * @param s ten TODOLIST
     * @return tao duoc hay khong
     */
    public boolean getData(String s){
        
        List<ToDoList> lTodoList = board.getList();
        int n = lTodoList.size();
        for(int i = 0; i < n; i++){
            if(lTodoList.get(i).getName().equals(s))
                return false;
        }
        ToDoList tdl = new ToDoList(s);
        board.addAToDoList(tdl);
        initList(board.getList());
        btAddList.setEnabled(true);
        return true;
    }
    /**
     * Ham sua ten 1 ToDoList
     * @param s ten moi
     * @return sua duoc hay khong
     */
    public boolean getNewName(String s){
        List<ToDoList> lTodoList = board.getList();
        int n = lTodoList.size();
        for(int i = 0; i < n; i++){
            if(i == listSelect) continue;
            if(lTodoList.get(i).getName().equals(s))
                return false;
        }
        lTodoList.get(listSelect).setName(s);
        initList(board.getList());
        return true;
    }
    /**
     * Ham mac dinh chay khi ket thuc Name Frame
     */
    public void end(){
        btAddList.setEnabled(true);
    }
    private BoardFrame mainFrame;
    private NameFrame nameFrame;
    private final Board board;
    private static int listSelect = -1;
    private static int taskSelect = -1;
    private static Task taskMove = null;
    private boolean isDone;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DoneItem;
    private javax.swing.JMenuItem RenameList;
    private javax.swing.JMenuItem WarningItem;
    private javax.swing.JButton btAddList;
    private javax.swing.JButton btAddTask;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox<String> cbHourE;
    private javax.swing.JComboBox<String> cbHourS;
    private javax.swing.JComboBox<String> cbMinuteE;
    private javax.swing.JComboBox<String> cbMinuteS;
    private javax.swing.JComboBox<String> cbPriority;
    private javax.swing.JCheckBox chbAlarm;
    private javax.swing.JCheckBox chbDone;
    private javax.swing.JCheckBox chbEveryDay;
    private javax.swing.JCheckBox chbEveryWeek;
    private javax.swing.JCheckBox chbFri;
    private javax.swing.JCheckBox chbMon;
    private javax.swing.JCheckBox chbRepeat;
    private javax.swing.JCheckBox chbSat;
    private javax.swing.JCheckBox chbSun;
    private javax.swing.JCheckBox chbThu;
    private javax.swing.JCheckBox chbTue;
    private javax.swing.JCheckBox chbWen;
    private com.toedter.calendar.JDateChooser dateChooserE;
    private com.toedter.calendar.JDateChooser dateChooserS;
    private javax.swing.JMenuItem deleteList;
    private javax.swing.JMenuItem deleteTask;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JList<String> lList;
    private javax.swing.JPopupMenu lMenuRight;
    private javax.swing.JList<String> lTask;
    private javax.swing.JLabel lbBoardName;
    private javax.swing.JMenuItem moveTask;
    private javax.swing.JMenuItem pasteTask;
    private javax.swing.JPanel pnDatechooser;
    private javax.swing.JPanel pnDayRepeat;
    private javax.swing.JPanel pnList;
    private javax.swing.JPanel pnListNote;
    private javax.swing.JPanel pnNewTask;
    private javax.swing.JPanel pnRepeat;
    private javax.swing.JPanel pnTask;
    private javax.swing.JPanel pnTime;
    private javax.swing.JPopupMenu tMenuRight;
    private javax.swing.JTextArea taNote;
    private javax.swing.JTextField tfPlace;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
