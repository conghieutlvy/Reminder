/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package btl_oop;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;

/**
 * Class BoardFrame Mo ta danh sach cac bang cong viec
 * @author nhom2
 */
public class BoardFrame extends javax.swing.JFrame implements MouseListener{

    /**
     * Tao mot BoardFrame
     */
    public BoardFrame() {
        alarm.start();
        initComponents();
        this.setLocation(100, 80);
        initBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        pnBoards = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("REMINDER");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btAdd.setText("ADD");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout pnBoardsLayout = new javax.swing.GroupLayout(pnBoards);
        pnBoards.setLayout(pnBoardsLayout);
        pnBoardsLayout.setHorizontalGroup(
            pnBoardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1028, Short.MAX_VALUE)
        );
        pnBoardsLayout.setVerticalGroup(
            pnBoardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(pnBoards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnBoards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        List<Board> lBoard = reminder.getList();
        int number = lBoard.size();
        if(number >= 20) return ;
        nameFrame = new NameFrame(this,"Enter Your Board Name",null,"Create");   
        nameFrame.setVisible(true);
        nameFrame.setTitle("Create A New Board");
        btAdd.setEnabled(false);
        
    }//GEN-LAST:event_btAddActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        reminder.save();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardFrame().setVisible(true);
            }
        });
    }
    
    public boolean getData(String s){
        List<Board> lBoards = reminder.getList();
        int n = lBoards.size();
        for(int i =0; i< n; i++){
            if(lBoards.get(i).getName().equals(s))
                return false;
        }
        for(int i = 0; i < n; i++){
            String name = llbBoards.get(i).getText();
            
            if(name.equals("")){
                llbBoards.get(i).setText(s);
                lBoards.get(i).setName(s);
                return true;
            }
        }
        
        Board b = new Board(s);
        lBoards.add(b); 
        initBoard();
        btAdd.setEnabled(true);
        return true;
    }
    private void initBoard(){
        List<Board> lBoards = reminder.getList();
        int n = lBoards.size();
        llbBoards.clear();
        pnBoards.removeAll();
        pnBoards.updateUI();
        for(int number = 0; number < n; number ++){
            createLabel();
            int row = number/5;
            int column = number%5;
            pnBoards.add(llbBoards.get(number));
            llbBoards.get(number).setLocation(50+ column*200, 20+ row*70);
            llbBoards.get(number).setText(lBoards.get(number).getName());
            llbBoards.get(number).setVisible(true);
        }
    }
    private void createLabel(){
        BoardFrame boardF = this;
        int n = llbBoards.size();
        JLabel lbBoard = new JLabel();
        JPopupMenu popup = new JPopupMenu();
        JMenuItem menu1 = new JMenuItem("Rename");
        JMenuItem menu2 = new JMenuItem("Delete");
        JSeparator spr = new JSeparator();
        JMenuItem menu3 = new JMenuItem("Done Task");
        popup.add(menu1);
        popup.add(menu2);
        popup.add(spr);
        popup.add(menu3);
        lbBoard.setSize(150, 50);
        lbBoard.setVisible(false);
        lbBoard.setHorizontalAlignment((int) CENTER_ALIGNMENT);
        lbBoard.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbBoard.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                detailFrame = new DetailJFrame(boardF, reminder.getList().get(n),false);
                detailFrame.setVisible(true);
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

        menu1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String s = lbBoard.getText();
                nameFrame = new NameFrame(boardF, "Enter Your New Board Name",lbBoard.getText(),"Change");
                nameFrame.setVisible(true);
                lbBoard.setText("");
            }
        });
        menu2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                 deleteABoard(lbBoard.getText());
            }
        });
        menu3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                detailFrame = new DetailJFrame(boardF, reminder.getList().get(n),true);
                detailFrame.setTitle("Done Tasks");
                detailFrame.setVisible(true);
            }
        });
        lbBoard.setComponentPopupMenu(popup);
        llbBoards.add(lbBoard);
    }
    public void end(){
        btAdd.setEnabled(true);
        initBoard();
    }
    public Reminder getReminder(){
        return reminder;
    }
    private void deleteABoard(String s){
        List<Board> lBoard = reminder.getList();
        int n = lBoard.size();
        for(int i = 0; i< n; i++){
            if(lBoard.get(i).getName().equals(s)){
                reminder.removeABoards(lBoard.get(i));
                initBoard();
                return;
            }
        }
    }
    private static final Reminder reminder = new Reminder();
    private final ArrayList<JLabel> llbBoards = new ArrayList<>();
    private final ArrayList<JPopupMenu> lPopup = new ArrayList<>();
    private NameFrame nameFrame;
    private DetailJFrame detailFrame;
    private static Alarm alarm = new Alarm(reminder);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnBoards;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
       
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
}
